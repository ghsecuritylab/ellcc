# Makefile.in
# this is the Makefile for the basic library

#temporary: iptree iptparse cipart smin

# main target is libbasic.a, the basic library.
THIS := libbasic.a
all: $(THIS)

SMBASE   := @SMBASE@
LLVM := @LLVM@
LLVMCCFLAGS := $(shell llvm-config --cxxflags) -I$(SMBASE)

# external tools
PERL := @PERL@
DEP := $(PERL) $(SMBASE)/depend.pl

# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =
TOTOOLCLEAN =
TODISTCLEAN =

# re-create the Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in config.status
	./config.status

# reconfigure if the configure script has changed
config.status: configure.pl $(SMBASE)/sm_config.pm
	./config.status -reconfigure

# modules to compile with coverage info; I do not build them
# all with coverage info because it takes about 25% longer to
# compile for each module with coverage info
GCOV_MODS := @GCOV_MODS@
TOCLEAN += *.bb *.bbg *.da


# --------------------- extension modules ----------------------
# base modules
EXT_OBJS    :=


# ----------------------- compiler configuration -------------------
# C++ preprocessor, compiler and linker
CXX := @CXX@

# flags for the C++ compiler (and preprocessor)
CCFLAGS := @CCFLAGS@ -Woverloaded-virtual $(LLVMCCFLAGS)

# how to enable coverage
GCOV_OPTS := -fprofile-arcs -ftest-coverage

# some other tools
AR     := ar
RANLIB := ranlib
CMP    := cmp
CP     := cp
TBLGEN := tblgen
ECHO   := echo

# compile .cpp in this directory to a .o
TOCLEAN += *.o *.d

%.o: %.cpp
	$(CXX) -c -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS)
	@$(DEP)   -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS) >$*.d


#### basic client code

# ------------------------- libbasic ---------------------

# list of modules needed for the preprocessor; ideally they're in an order
# that finds serious compilation problems earliest (it's ok to
# rearrange as different parts of the code are in flux)
BASIC_OBJS := \
  Builtins.o \
  DiagnosticBuffer.o \
  ConvertUTF.o FileManager.o SourceLocation.o TargetInfo.o TokenKinds.o \
  IdentifierTable.o SourceManager.o Targets.o \
  Diagnostic.o LangOptions.o

-include $(BASIC_OBJS:.o=.d) main.d


BUILT_SOURCES = \
    DiagnosticEllccKinds.inc \
    DiagnosticElsaKinds.inc \
    DiagnosticLexKinds.inc \
    DiagnosticCommonKinds.inc \
    DiagnosticGroups.inc

INCFiles := $(filter %.inc,$(BUILT_SOURCES))
INCTMPFiles := $(INCFiles:%=%.tmp)
.PRECIOUS: $(INCTMPFiles) $(INCFiles)

# INCFiles rule: All of the tblgen generated files are emitted to
# $(ObjDir)/%.inc.tmp, instead of emitting them directly to %.inc.  This allows
# us to only "touch" the real file if the contents of it change.  IOW, if
# tblgen is modified, all of the .inc.tmp files are regenerated, but no
# dependencies of the .inc files are, unless the contents of the .inc file
# changes.
$(INCFiles) : %.inc : %.inc.tmp
	$(CMP) -s $@ $< || $(CP) $< $@

$(THIS): $(BUILT_SOURCES) $(BASIC_OBJS) 
	rm -f $(THIS)
	$(AR) -r $(THIS) $(BASIC_OBJS)
	-$(RANLIB) $(THIS)

TBLGEN=tblgen

Diagnostic%Kinds.inc.tmp : Diagnostic.td DiagnosticGroups.td Diagnostic%Kinds.td
	@$(ECHO) "Building ELLCC $(patsubst Diagnostic%Kinds.inc.tmp,%,$(@F)) diagnostic tables with tblgen"
	$(TBLGEN) -gen-clang-diags-defs -clang-component=$(patsubst Diagnostic%Kinds.inc.tmp,%,$(@F)) -o $@ $<

DiagnosticGroups.inc.tmp : Diagnostic.td $(wildcard Diagnostic*.td)
	@$(ECHO) "Building ELLCC diagnostic groups with tblgen"
	$(TBLGEN) -gen-clang-diag-groups -o $@ $<

# -------------------- count source lines -------------------
# dsw: This should give the right answer even after a "make all",
# since we filter the generated files.
#
# sm: I haven't carefully inspected the set of files counted,
# and it appears to not count cc_tokens.tok (which it should).
# I don't care about fixing right now it though.

GENREGEX := '\.gen\.\|lexer\.yy\|cc_tokens'
.PHONY: count-loc
count-loc:
	@echo
	@echo "Count of lines of source code in this directory by file type."
	@echo "C++, C, and headers:"
# 	@ls *.cc *.c *.h | grep -v $(GENREGEX) | xargs wc -l | grep total
	@ls *.cc *.h | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo "tok, lex, gr, and ast:"
# 	@ls *_ext.tok *_ext.lex *.gr *.ast | grep -v $(GENREGEX) | xargs wc -l | grep total
	@ls *_ext.tok *.gr *.ast | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo "sum of those:"
# 	@ls *.cc *.c *.h *_ext.tok *_ext.lex *.gr *.ast
	@ls *.cc *.h *_ext.tok *.gr *.ast \
          | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo
	@echo "Makefiles:"
	@ls Makefile.in *.mk | xargs wc -l | grep total


# -------------------- clean, etc. -------------------
clean:
	rm -f $(TOCLEAN) gmon.out $(INCFiles) $(INCTMPFiles)
	-cd outdir && ls | grep -v CVS | xargs rm -f

distclean: clean
	rm -f $(TODISTCLEAN)
	rm -f config.status config.summary
	rm -rf gendoc

toolclean: clean
	rm -f $(TOTOOLCLEAN)

check: semgrep all
	./packedword_test
	MAKE=$(MAKE) ./regrtest
	@echo ""
	@echo "Regression tests passed."

# run all the tests
.PHONY: check-full
check-full: check
