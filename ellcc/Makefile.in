# Makefile.in
# this is the Makefile for ecc, the Elsa/LLVM C/C++ Parser

# main target is 'ecc', a C/C++ parser.
all: ecc quicktest

# directories of other software
SMBASE   := @SMBASE@
PW       := @PW@
AST      := @AST@
ELKHOUND := @ELKHOUND@
ELSA     := @ELSA@

# stuff inside those other directories
LIBSMBASE   := $(SMBASE)/libsmbase.a
LIBPW       := $(PW)/libpw.a
LIBAST      := $(AST)/libast.a
LIBELKHOUND := $(ELKHOUND)/libelkhound.a
LIBELSA     := $(ELSA)/libelsa.a

# external tools
PERL := @PERL@
MYFLEX := $(PERL) $(SMBASE)/run-flex.pl -nobackup -copies
DEP := $(PERL) $(SMBASE)/depend.pl

# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =
TOTOOLCLEAN =
TODISTCLEAN =

# re-create the Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in config.status
	./config.status

# reconfigure if the configure script has changed
config.status: configure.pl $(SMBASE)/sm_config.pm
	./config.status -reconfigure

# modules to compile with coverage info; I do not build them
# all with coverage info because it takes about 25% longer to
# compile for each module with coverage info
GCOV_MODS := @GCOV_MODS@
TOCLEAN += *.bb *.bbg *.da


# --------------------- extension modules ----------------------

# optional: LLVM generation
LLVM := @LLVM@
ifneq ("$(LLVM)","disabled")
  LLVMTARGETS := $(shell llvm-config --targets-built)
  LLVMLDFLAGS := $(shell llvm-config --ldflags --libs $(LLVMTARGETS) bitreader bitwriter instrumentation scalaropts ipo linker)
  LLVMCCFLAGS := $(shell llvm-config --cxxflags)
  CC_AST_MODS += cc2llvm.ast
  EXT_OBJS    += cc2llvm.o
else
  LLVMLDFLAGS :=
  LLVMCCFLAGS :=
endif

# ----------------------- compiler configuration -------------------
# C++ preprocessor, compiler and linker
CXX := @CXX@

# flags for the C++ compiler (and preprocessor)
CCFLAGS := @CCFLAGS@ -Woverloaded-virtual -I$(SMBASE) -I$(PW) -I$(AST) -I$(ELKHOUND) -I$(ELSA)

# how to enable coverage
GCOV_OPTS := -fprofile-arcs -ftest-coverage

# flags for the linker
libraries := $(LIBELSA) $(LIBELKHOUND) $(LIBAST) $(LIBSMBASE) $(LIBPW)
LDFLAGS := @LDFLAGS@ $(libraries)

# compile .cc in this directory to a .o
TOCLEAN += *.o *.d
%.o: %.cc
	$(CXX) -c -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS) $(LLVMCCFLAGS)
	@$(DEP)   -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS) $(LLVMCCFLAGS) >$*.d

# ------------------------- ecc ---------------------

# list of modules needed for the parser; ideally they're in an order
# that finds serious compilation problems earliest (it's ok to
# rearrange as different parts of the code are in flux)
ECC_OBJS := \
  ellcc.o \
  elsa.o

-include $(ECC_OBJS:.o=.d)

# ecc binary
TOCLEAN += ecc
ecc: $(ECC_OBJS) $(libraries)
	$(CXX) -o $@ $(ECC_OBJS) $(LDFLAGS) $(LLVMLDFLAGS)

# run the binary; the 'quicktest' file is so we don't run it if
# 'ecc' hasn't recently changed
TOCLEAN += quicktest
quicktest: ecc
	./ecc -o sieve test/sieve.c
	./sieve
	@touch quicktest
	@echo BUILD FINISHED


# ------------------ documentation ------------------

# -------------------- count source lines -------------------
# dsw: This should give the right answer even after a "make all",
# since we filter the generated files.
#
# sm: I haven't carefully inspected the set of files counted,
# and it appears to not count cc_tokens.tok (which it should).
# I don't care about fixing right now it though.

GENREGEX := '\.gen\.\|lexer\.yy\|cc_tokens'
.PHONY: count-loc
count-loc:
	@echo
	@echo "Count of lines of source code in this directory by file type."
	@echo "C++, C, and headers:"
# 	@ls *.cc *.c *.h | grep -v $(GENREGEX) | xargs wc -l | grep total
	@ls *.cc *.h | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo "tok, lex, gr, and ast:"
# 	@ls *_ext.tok *_ext.lex *.gr *.ast | grep -v $(GENREGEX) | xargs wc -l | grep total
	@ls *_ext.tok *.gr *.ast | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo "sum of those:"
# 	@ls *.cc *.c *.h *_ext.tok *_ext.lex *.gr *.ast
	@ls *.cc *.h *_ext.tok *.gr *.ast \
          | grep -v $(GENREGEX) | xargs wc -l | grep total
	@echo
	@echo "Makefiles:"
	@ls Makefile.in *.mk | xargs wc -l | grep total


# -------------------- clean, etc. -------------------
clean:
	rm -f $(TOCLEAN) gmon.out sieve
	-cd outdir && ls | grep -v CVS | xargs rm -f

distclean: clean
	rm -f $(TODISTCLEAN)
	rm -f config.status config.summary
	rm -rf gendoc

toolclean: clean
	rm -f $(TOTOOLCLEAN)

check: all
	MAKE=$(MAKE) ./regrtest
	@echo ""
	@echo "Regression tests passed."
