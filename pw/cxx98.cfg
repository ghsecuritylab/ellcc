pragma PFX errorposition line
// Syntax for the C++ 1998 language (ISO/IEC 14882:1998).
language "C++98";
description "C++ programming language: ISO/IEC 14882:1998";
needwhitespace false;                   // White space not needed for parsing.
neednewline false;                      // Newlines not needed for parsing.
needtrigraphs true;                     // Trigraphs needed for parsing.

// #pragma PSYN debug 0xf0014
// #pragma PFX debug 0x00002
#pragma PSYN substitute 0

/* RICH: '<:' = '{', ':>' = '}', '<%' = '[', '%>' = ']', '%:' = '#', '%:%:' = "##", */

// Language tokens (Token IDENTIFIER must be defined if keywords or macros are used).
tokens {
    '*', '&', '-', '!', '~', '(', ')', '?', ':', ',',
    '/', '%', '<<', '>>', '<', '>', '<=', '>=', '==', '!=',
    '^', '|', '&&', '||', '+', '...',
    ';', '[', ']', '{', '}', '=', '*=', '/=', '%=', '+=', '++', '-=', '--',
    '->', '&=', '^=', '|=', '.', '<<=', '>>=',
    '.*', '::', '->*',
    IDENTIFIER = "[a-zA-Z_][a-zA-Z_0-9]*",
    INTEGER = "[1-9][0-9]*([uU]|[lL])*",                // Decimal integer
    INTEGER = "0[xX][0-9a-fA-F]+([uU]|[lL])*",          // Hexadecimal integer
    INTEGER = "0[0-7]*([uU]|[lL])*",                    // Octal integer
    FLOAT = "[0-9]+\\.[0-9]*([eE][-+]?[0-9]+)?",        // <digits>.
    FLOAT = "[0-9]*\\.[0-9]+([eE][-+]?[0-9]+)?",        // .<digits>
    FLOAT = "[0-9]+[eE][-+]?[0-9]+",                    // <digits>e
    STRING = "L?\"(\\\\.|[^\"\n])*\"",
    CHARACTER = "L?'(\\\\.|[^'\n])*'",
};

// Language comments (start string .. end string).
comment { "//" .. "\n" };                               // Single line comment.
comment { "/*" .. "*/" };                               // Multi line comment.

// Language keywords (These must be a subset of IDENTIFIER).
keywords {
 asm, auto, bool, break, catch, case, char, class, const, const_cast, continue,
 default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern,
 false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new,
 operator, private, protected, public, register, reinterpret_cast, return,
 short, signed, sizeof, static, static_cast, struct, switch,
 template, this, throw, true, try, typedef, typeid, typename,
 union, unsigned, using, virtual, void, volatile, wchar_t, while,
 /* RICH: and = '&&', and_eq = '&=', bitand = '&', bitor = '|', compl = '~',
 not = '!', not_eq = '!=', or = '||', or_eq = '!=', xor = '^', xor_eq = '^=', */
};

#define __STDC__ 1
#define __cplusplus 199711L
