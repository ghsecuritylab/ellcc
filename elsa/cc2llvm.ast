//===- cc2llvm.ast - Elsa AST to LLVM Lowering -----------------------------===//
//
// Copyright (c) 2009, Richard Pennington
// All rights reserved.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===----------------------------------------------------------------------===//

// extension of cc.ast: additional entry points for cc2llvm

verbatim {
  #define LLVM_EXTENSION        // this extension module is active
  #include <vector>
  class CC2LLVMEnv;             // cc2llvm.h
  namespace llvm {
    class Value;
    class Type;
  };
}

class TopForm {
  public void cc2llvm(CC2LLVMEnv &env) const;
}

class Function {
  public void cc2llvm(CC2LLVMEnv &env) const;
}

class Declaration {
  public void cc2llvm(CC2LLVMEnv &env) const;
}

class Statement {
  pure_virtual void cc2llvm(CC2LLVMEnv &env) const;
}

class Expression {
  pure_virtual llvm::Value *cc2llvm(CC2LLVMEnv &env, int& deref) const;
}

class FullExpression {
  public llvm::Value *cc2llvm(CC2LLVMEnv &env, int& deref) const;
}

class Constraint() {
    public sm::string string; // The constraint string in LLVM style.
}

class Asm() {
    public sm::string rwInputs; // The rw inputs string.
}
// EOF
