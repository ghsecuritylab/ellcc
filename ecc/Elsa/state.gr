//===- state.gr - State machine extensions -------------------------------===//
//
// Copyright (c) 2009, Richard Pennington
// All rights reserved.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===----------------------------------------------------------------------===//

/* Specifically, the extensions found in this file are:
 * 1. An event declaration.
 * 2. A state definition.
 */

/* Allow the definition of an event where ever a
 * SimpleDeclaration is allowed.
 */
nonterm(Declaration*) SimpleDeclaration {
    // An event is syntactically similar to a constructor.
    -> "__event__" d:MemberDeclarator ";"
        {
         return new Declaration(
            DF_EVENT,
            new TS_simple(loc, endloc, ST_VOID),
            FakeList<Declarator>::makeList(d)
            );
        }
}

/* A state can be defined globally.
 */
nonterm(TopForm*) Declaration {
    -> s:StateDefinition
        { return new TF_state(loc, s); }
}

/* A state can be defined as a class member.
 */
nonterm(Member*) MemberDeclaration {
    // a state definition
    -> s:StateDefinition
        { return new MR_state(loc, endloc, s); }
}

nonterm(State*) StateDefinition {
    // A state declaration or reference.
    -> i:InitialState "__state__" d:Declarator ";"
        { return new State(loc, endloc, i, d, NULL); }

    // A state definition. Multiple states may be "and"ed.
    -> i:InitialState "__state__" d:Declarator l:AndStateList
        { return new State(loc, endloc, i, d, l); }
}

/* One state in a state machine can be the initial state.
 */
nonterm(bool) InitialState {
  -> empty { return false; }
  -> "->"  { return true; }
}

/* Either a single state or two or more "and"ed states.
 */
nonterm(FakeList<StateEntryList>*) AndStateList {
    -> "{" h:StateEntryListOpt "}"
        { return FakeList<StateEntryList>::makeList(h); }
    -> "{" h:StateEntryListOpt "}" "&&" t:AndStateList
       { h->next = t->first();
         return FakeList<StateEntryList>::makeList(h); }
}

/* A state may be empty.
 */
nonterm(StateEntryList*) StateEntryListOpt {
    -> empty
        { return new StateEntryList(loc, endloc, FakeList<StateEntry>::emptyList()); }
    -> l:StateEntryList
        { return new StateEntryList(loc, endloc, l); }
}

/* A state is made of of a series of entries.
 */
nonterm(FakeList<StateEntry>*) StateEntryList {
    -> e:StateEntry
        { return FakeList<StateEntry>::makeList(e); }
    -> e:StateEntry l:StateEntryList
       { e->next = l->first();
         return FakeList<StateEntry>::makeList(e); }
}

/* State entries.
 * The order of state entries has no effect on the definition of the state.
 * There is no notion of execution "falling through" from one entry to
 * the next. Note that this is different than a switch statement
 * and its cases.
 */
nonterm(StateEntry*) StateEntry {
    // Start a timer. One timer per state.
    -> "->" "[" e:Expression "]" s:Statement
        { return new SE_timer(loc, endloc, e, s); }

    // Actions on state entry.
    -> "->" s:Statement
        { return new SE_entry(loc, endloc, s); }

    // Actions triggered by events.
    -> "case" d:MemberDeclarator ":" s:Statement
        { return new SE_event(loc, endloc, d, s); }

    // Actions triggered by events not handled elsewhere.
    -> "default" ":" s:Statement
        { return new SE_default(loc, endloc, s); }

    // Define or reference a nested substate.
    -> s:StateDefinition
        { return new SE_reference(loc, endloc, s); }

    // Actions on state exit.
    -> "->*" s:Statement
        { return new SE_exit(loc, endloc, s); }
}

/* Add the active modifier.
 */
nonterm(UberModifiers) UberModifier {
    -> "__active__" { return UM_ACTIVE; }
}

// A state transition.
nonterm(Statement*) Statement {
  -> "->" d:Declarator ";"
       { return new S_transition(loc ENDLOCARG(endloc), d); }
}

