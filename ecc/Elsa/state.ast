//===- state.ast - State machine extensions ------------------------------===//
//
// Copyright (c) 2009, Richard Pennington
// All rights reserved.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===----------------------------------------------------------------------===//

verbatim {
  #define STATE_EXTENSION       // this extension module is active
}


// The AST extensions in this file are organized in parallel with the
// syntactic extensions in state.gr.

// An addition class member.
class Member () {
    -> MR_state(State s);       // A state definition.
}

// An entry of a state.
class StateEntry (SourceLocation loc, SourceLocation endloc) {
    public StateEntry *next=NULL;                       // FakeList link
    pure_virtual void tcheck(Env &env);                 // Type check the node.
    -> SE_timer(Expression e, Statement s);             // A timed statement.
    -> SE_entry(Statement s);                           // An entry action.
    -> SE_event(Declarator d, Statement s);             // An event handler.
    -> SE_default(Statement s);                         // A default event handler.
    -> SE_reference(State s);                           // A referenced or nested state.
    -> SE_exit(Statement s);                            // An exit action.
}

// An list of a state entries.
class StateEntryList (SourceLocation loc, SourceLocation endloc, FakeList<StateEntry>* entries) {
    public StateEntryList *next=NULL;   // FakeList link
}

// a state definition (toplevel or class member)
class State (SourceLocation loc, SourceLocation endloc,
             bool initial, IDeclarator d, FakeList<StateEntryList>* states) {
}

class TopForm () {
  // states
  -> TF_state(State s);
}

class Statement {
  // A state transition.
  -> S_transition(IDeclarator what);
}

