#! /bin/sh

KERNEL=1
CLEAN=0
LINUX_VERSION=4.1.15
ELLCC_VERSION=0.1.23
VIM_VERSION=7.4
VIM_FEATURES=normal # tiny, small, normal, big or huge (default: normal)
PYTHON_VERSION=3.5.1
E2FSPROGS_VERSION=1.42.13
NTFS3G_VERSION=2015.3.14
IPROUTE2_VERSION=4.3.0

usage() {
  echo usage: $0 [options] target
  echo "  options:"
  echo "    -nokernel           Don't build the Linux kernel"
  echo "    -clean              Clean up a previous build"
  echo "  targets:"
  echo "    help                This message"
  echo "    bcmrpi              Raspberry Pi    (ARMv6)"
  echo "    bcm2709             Raspberry Pi 2  (ARMv7)"
}

if [ $# -lt 1 ] ; then
  usage
  exit 1
fi

while [ $# -gt 1 ] ; do
  case $1 in
    -nokernel)
      # Don't build the Linux kernel
      KERNEL=0
      shift
      ;;
    -clean)
      # Clean up a previous build
      CLEAN=1
      shift
      ;;
    *)
      echo "unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

set -e
TOP=`pwd`
ELLCC=`realpath $TOP/../..`
UNAME=`uname`

BOARD=$1
if [ $BOARD = "help" ] ; then
  usage
  exit 0
elif [ $BOARD = "bcmrpi" ] ; then
  ARCH=arm
  BOARD=bcmrpi                  # Raspberry Pi
  TARGET=armv6-linux-engeabihf  # ARMv6
  NO_VDSO=0
elif [ $BOARD = "bcm2709" ] ; then
  ARCH=arm
  BOARD=bcm2709                 # Raspberry Pi 2
  TARGET=arm-linux-engeabihf    # ARMv7
  NO_VDSO=1
else
  echo "unknown target: $1"
  usage
  exit 1
fi

LINUX_CONFIG=${BOARD}_defconfig

# The build directory.
BUILD=$TOP/$TARGET
# The install directories.
ROOT=$TOP/image/$TARGET         # /
BOOT=$TOP/image/$TARGET/$BOARD  # /boot

DOWNLOAD=$TOP/download

if [ $CLEAN -ne 0 ] ; then
  rm -fr $BUILD
  rm -fr $ROOT
  exit 0
fi

if [ “${UNAME}” = “Darwin” ] ; then
  MAXJOBS=`sysctl hw.ncpu | cut -d: -f2 | tr -d [:space:]`
else
  MAXJOBS=`grep processor /proc/cpuinfo | wc -l`
fi

# Tools.
if [ “${UNAME}” = “Darwin” ] ; then
  export HOSTCC=clang
else
  export HOSTCC=$ELLCC/bin/ecc
fi
export CC="$ELLCC/bin/ecc -target $TARGET"
export CXX="$ELLCC/bin/ecc++ -target $TARGET"
export AR=$ELLCC/bin/ecc-ar
export RANLIB=$ELLCC/bin/ecc-ranlib
export STRIP=$ELLCC/bin/ecc-strip

mkdir -p $BUILD
mkdir -p $DOWNLOAD

if [ $KERNEL -ne 0 ] ; then
  if [ ! -e $DOWNLOAD/linux-$LINUX_VERSION.tar.xz ] ; then
    (cd $DOWNLOAD ; wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-$LINUX_VERSION.tar.xz)
  fi
  if [ ! -e linux-$LINUX_VERSION ] ; then
    tar xvfp $DOWNLOAD/linux-$LINUX_VERSION.tar.xz
    cd linux-$LINUX_VERSION/
    for p in `echo ../*-$LINUX_VERSION.patch` ; do
      patch -p1 < $p
    done
    if [ “${UNAME}” = “Darwin” ] ; then
      cp $TOP/makefile GNUmakefile
    else
      cp $TOP/makefile .
    fi
    cd $TOP
  fi
  if [ ! -e $BUILD/$BOARD ] ; then
    cd linux-$LINUX_VERSION/
    # Configure the kernel.
    make ARCH=$ARCH BUILD=$BUILD/$BOARD TARGET=$TARGET MAXJOBS=1 $LINUX_CONFIG
    mkdir -p $BUILD/$BOARD
    cd $BUILD/$BOARD
    if [ $NO_VDSO -eq 1 ] ; then
      sed -ie "s/CONFIG_VDSO=y/CONFIG_VDSO=n/" .config
    fi
    cd $TOP
  fi
  # Build the kernel.
  cd $BUILD/$BOARD
  make MAXJOBS=$MAXJOBS
  # Populate /boot
  mkdir -p $BOOT
  make INSTALL_DTBS_PATH=$BOOT/dtbs dtbs_install
  make INSTALL_MOD_PATH=$ROOT modules_install
  rm -f $ROOT/lib/modules/*/build       # Not needed on the target.
  rm -f $ROOT/lib/modules/*/source      # Not needed on the target.
  make INSTALL_PATH=$BOOT zinstall
  cd $TOP
fi

# Go into the target directory.
cd $BUILD

getversion () { # $1 = name $2 = URL $3 = archive $4 = command
  eval $1=yes
  if [ ! -e $DOWNLOAD/$3 ] ; then
    (cd $DOWNLOAD ; wget $2/$3)
  fi
  if [ ! -e $1 ] ; then
    tar xvfp $DOWNLOAD/$3
    if [ "$4" != "" ] ; then
      eval $4
    fi
  fi
}

if [ “${UNAME}” = “Darwin” ]; then
  UPDATE="rsync -u"
else
  UPDATE="cp -pfru"
fi

gitsource () { # $1 = name $2 = URL
  eval $1=yes
  if [ -e ../$1 ] ; then
    # Maintained in the ELLCC tree.
    echo "Copying $1"
    $UPDATE ../$1 .
  else
    # Fetched from a remote tree.
    if [ ! -e $1 ] ; then
      git clone $2
    else
      cd $1
      echo "Updating $1"
      git pull
      cd ..
    fi
  fi
}

# Comment any of the following gitsource and getversion lines
# to inhibit fetching and building that package.
gitsource sinit git://git.suckless.org/sinit
gitsource sbase git://git.suckless.org/sbase
gitsource ubase git://git.suckless.org/ubase
gitsource smdev git://git.suckless.org/smdev
gitsource nldev git://git.r-36.net/nldev
gitsource nlmon git://git.r-36.net/nlmon
gitsource svc git://git.r-36.net/svc
gitsource sdhcp git://git.2f30.org/sdhcp
gitsource loksh https://github.com/dimkr/loksh.git

getversion e2fsprogs \
  https://www.kernel.org/pub/linux/kernel/people/tytso/e2fsprogs/v$E2FSPROGS_VERSION \
  e2fsprogs-$E2FSPROGS_VERSION.tar.xz \
  "mv e2fsprogs-$E2FSPROGS_VERSION e2fsprogs ; \
  LDFLAGS=-Wl,-s ; \
  (cd e2fsprogs ; ./configure --prefix=$ROOT/usr --exec-prefix=$ROOT ; make install)"

getversion ntfs3g \
  https://tuxera.com/opensource ntfs-3g_ntfsprogs-$NTFS3G_VERSION.tgz \
  "mv ntfs-3g* ntfs3g ; \
  LDFLAGS=-Wl,-s ; \
  (cd ntfs3g ; \
    patch -p1 < ../../ntfs3g.patch ; \
    ./configure --prefix=$ROOT/usr --exec-prefix=$ROOT --disable-shared \
      --mandir=$ROOT/usr/share/man \
      --enable-really-static)"

getversion vim \
  ftp://ftp.vim.org/pub/vim/unix vim-$VIM_VERSION.tar.bz2 \
  "mv vim* vim ; \
  LDFLAGS=-Wl,-s ; \
  (cd vim ; ./configure --prefix=$ROOT/usr --exec-prefix=$ROOT)"

getversion iproute2 \
  https://www.kernel.org/pub/linux/utils/net/iproute2 \
  iproute2-$IPROUTE2_VERSION.tar.xz \
  "mv iproute2* iproute2 ; \
  LDFLAGS=-Wl,-s ; \
  (cd iproute2 ; \
   patch -p0 < ../../iproute2.patch ; \
   PKG_CONFIG=false ./configure --prefix=$ROOT --exec-prefix=$ROOT)"

if [ 0 -ne 0 ] ; then
  git clone https://github.com/landley/toybox.git
  wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-/$PYTHON_VERSION.tar.xz
  tar xvfp Python-3.5.1.tar.xz
fi

mkdir -p $ROOT/bin
mkdir -p $ROOT/usr/bin
MANPREFIX=$ROOT/usr/share/man
DOCPREFIX=$ROOT/usr/share/doc
mkdir -p $MANPREFIX

if [ 0 -ne 0 ] ; then
# ellcc
if [ ! -e ellcc-$TARGET-$ELLCC_VERSION.tgz ] ; then
  wget http://ellcc.org/releases/ellcc-$TARGET-$ELLCC_VERSION.tgz
  cd $ROOT/usr
  if [ -e ellcc ] ; then
    rm -fr ellcc
  fi
  tar xvfp $TOP/ellcc-$TARGET-$ELLCC_VERSION.tgz
  cd $ROOT/bin
  ln -sf ../usr/ellcc/bin/ecc ecc
  ln -sf ../usr/ellcc/bin/ecc++ ecc++
  cd $TOP
fi
fi

makeit () { # $1 = name, $2 = command
  eval doit=\$$1
  if [ "$doit" = "yes" ] ; then
    cd $1
    eval $2
    cd ..
  fi

}

makeit sinit "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit nldev "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit nlmon "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit sbase "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit sdhcp "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit smdev "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit scv "cp bin/* $ROOT/bin ; cp -R svc.d $ROOT/bin"
makeit ubase "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
# ksh
makeit loksh "make LDFLAGS=-Wl,-s DESTDIR= PREFIX=$ROOT MAN_DIR=$MANPREFIX DOC_DIR=$DOCPREFIX install"
makeit vim "make install"
makeit e2fsprogs  "make install ; \
                  (cd $ROOT/sbin ; \
                   rm -f mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.ext4dev ; \
                   rm -f fsck.ext2 fsck.ext3 fsck.ext4 fsck.ext4dev ; \
                   ln -s mke2fs mkfs.ext2 ; \
                   ln -s mke2fs mkfs.ext3 ; \
                   ln -s mke2fs mkfs.ext4 ; \
                   ln -s mke2fs mkfs.ext4dev ; \
                   ln -s e2fsck fsck.ext2 ; \
                   ln -s e2fsck fsck.ext3  ; \
                   ln -s e2fsck fsck.ext4 ; \
                   ln -s e2fsck fsck.ext4dev ; 
                   rm -f e2label findfs ; \
                   ln -s tune2fs e2label ; \
                   ln -s tune2fs findfs)"

NTFS3G_PROGS="src/lowntfs-3g \
  src/ntfs-3g \
  src/ntfs-3g.probe \
  src/ntfs-3g.secaudit \
  src/ntfs-3g.usermap \
  ntfsprogs/mkntfs \
  ntfsprogs/ntfscat \
  ntfsprogs/ntfsclone \
  ntfsprogs/ntfscluster \
  ntfsprogs/ntfscmp \
  ntfsprogs/ntfscp \
  ntfsprogs/ntfsfix \
  ntfsprogs/ntfsinfo \
  ntfsprogs/ntfslabel \
  ntfsprogs/ntfsls \
  ntfsprogs/ntfsresize \
  ntfsprogs/ntfsundelete"
makeit ntfs3g   "make; cp $NTFS3G_PROGS $ROOT/sbin ; \
                for p in \`find . -name "*.8.in"| grep -v e2fsprogs\` ; do \
                  n=\`basename \$p | sed 's:.in::g'\` ; \
                  cp \$p $ROOT/usr/share/man/man8/\$n ; \
                done ; \
                (cd $ROOT/sbin ; \
                 ln -sf mkntfs mkfs.ntfs ; \
                 ln -sf lowntfs-3g mount.lowntfs-3g ; \
                 ln -sf ntfs-3g mount.ntfs-3g)"

makeit iproute2 "make SBINDIR=$ROOT/sbin \
                  CONFDIR=$ROOT/etc/iproute2 \
                  DATADIR=$ROOT/usr/share \
                  DOCDIR=$ROOT/usr/doc \
                  MANDIR=$ROOT/usr/man \
                  ARPDDIR=$ROOT/var/lib/arpd \
                  KERNEL_INCLUDE=$ROOT/usr/include \
                  install"

# toybox
#cd toybox/
#make defconfig toybox
#cd ..

# Python
#cd Python-$PYTHON_VERSION
#LDFLAGS=-Wl,-s ./configure --prefix=$ROOT/usr --exec-prefix=$ROOT
#make install
#cd ..
