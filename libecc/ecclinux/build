#! /bin/sh

KERNEL=1
LINUX_VERSION=4.1.15
ELLCC_VERSION=0.1.23
MKSH_VERSION=R52
VIM_FEATURES=normal # tiny, small, normal, big or huge (default: normal)
PYTHON_VERSION=3.5.1

usage() {
  echo usage: $0 [options] target
  echo "  options:"
  echo "    -nokernel           Don't build the Linux kernel"
  echo "  targets:"
  echo "    help                This message"
  echo "    bcmrpi              Raspberry Pi    (ARMv6)"
  echo "    bcm2709             Raspberry Pi 2  (ARMv7)"
}

if [ $# -lt 1 ] ; then
  usage
  exit 1
fi

while [ $# -gt 1 ] ; do
  case $1 in
    -nokernel)
      # Don't build the Linux kernel
      KERNEL=0
      shift
      ;;
    *)
      echo "unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

BOARD=$1
if [ $BOARD = "help" ] ; then
  usage
  exit 0
fi

set -e
TOP=`pwd`
ELLCC=`realpath $TOP/../..`


if [ $BOARD = "bcmrpi" ] ; then
  ARCH=arm
  BOARD=bcmrpi                  # Raspberry Pi
  TARGET=armv6-linux-engeabihf  # ARMv6
  NO_VDSO=0
elif [ $BOARD = "bcm2709" ] ; then
  ARCH=arm
  BOARD=bcm2709                 # Raspberry Pi 2
  TARGET=arm-linux-engeabihf    # ARMv7
  NO_VDSO=1
fi

LINUX_CONFIG=${BOARD}_defconfig

# The build directory.
BUILD=$TOP/$TARGET
# The install directory.
ROOT=$TOP/image/$TARGET
BOOT=$TOP/image/$TARGET/$BOARD

MAXJOBS=`grep processor /proc/cpuinfo | wc -l`

# Tools.
export CC="$ELLCC/bin/ecc -target $TARGET"
export CXX="$ELLCC/bin/ecc++ -target $TARGET"
export AR=$ELLCC/bin/ecc-ar
export RANLIB=$ELLCC/bin/ecc-ranlib
export STRIP=$ELLCC/bin/ecc-strip

if [ $KERNEL -ne 0 ] ; then
  if [ ! -e linux-$LINUX_VERSION.tar.xz ] ; then
    wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-$LINUX_VERSION.tar.xz
  fi
  if [ ! -e linux-$LINUX_VERSION ] ; then
    tar xvfp linux-$LINUX_VERSION.tar.xz
    cd linux-$LINUX_VERSION/
    for p in `echo ../*-$LINUX_VERSION.patch` ; do
      patch -p1 < $p
    done
    cp $TOP/makefile .
    cd $TOP
  fi
  if [ ! -e $BUILD/$BOARD ] ; then
    cd linux-$LINUX_VERSION/
    # Configure the kernel.
    make ARCH=$ARCH BUILD=$BUILD/$BOARD TARGET=$TARGET MAXJOBS=1 $LINUX_CONFIG
    mkdir -p $BUILD/$BOARD
    cd $BUILD/$BOARD
    if [ $NO_VDSO -eq 1 ] ; then
      sed -ie "s/CONFIG_VDSO=y/CONFIG_VDSO=n/" .config
    fi
    cd $TOP
  fi
  # Build the kernel.
  cd $BUILD/$BOARD
  make MAXJOBS=$MAXJOBS
  # Populate /boot
  mkdir -p $BOOT
  make INSTALL_DTBS_PATH=$BOOT/dtbs dtbs_install
  make INSTALL_MOD_PATH=$ROOT modules_install
  rm -f $ROOT/lib/modules/*/build       # Not needed on the target.
  rm -f $ROOT/lib/modules/*/source      # Not needed on the target.
  make INSTALL_PATH=$BOOT zinstall
  cd $TOP
fi

# Go into the target directory.
cd $BUILD

if [ ! -e sinit ] ; then
  git clone git://git.suckless.org/sinit
else
  cd sinit
  git pull
  cd ..
fi
if [ ! -e mksh-$MKSH_VERSION.tgz ] ; then
  wget https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-$MKSH_VERSION.tgz
  tar xvfp mksh-$MKSH_VERSION.tgz
fi

if [ ! -e nldev ] ; then
  git clone git://git.r-36.net/nldev
else
  cd nldev
  git pull
  cd ..
fi
if [ ! -e nlmon ] ; then
  git clone git://git.r-36.net/nlmon
else
  cd nlmon
  git pull
  cd ..
fi
if [ ! -e sbase ] ; then
  git clone git://git.suckless.org/sbase
else
  cd sbase
  git pull
  cd ..
fi
if [ ! -e sdhcp ] ; then
  git clone git://git.2f30.org/sdhcp
else
  cd sdhcp
  git pull
  cd ..
fi
if [ ! -e smdev ] ; then
  git clone git://git.suckless.org/smdev
else
  cd smdev
  git pull
  cd ..
fi
if [ ! -e svc ] ; then
  git clone git://git.r-36.net/svc
else
  cd svc
  git pull
  cd ..
fi
if [ ! -e ubase ] ; then
  git clone git://git.suckless.org/ubase
else
  cd ubase
  git pull
  cd ..
fi
if [ ! -e loksh ] ; then
  git clone https://github.com/dimkr/loksh.git
else
  cd loksh
  git pull
  cd ..
fi
if [ ! -e vim ] ; then
  git clone https://github.com/vim/vim.git
  cd vim
  LDFLAGS=-Wl,-s ./configure --prefix=$ROOT/usr --with-features=$VIM_FEATURES
  cd ..
else
  cd vim
  git pull
  cd ..
fi
if [ 0 -ne 0 ] ; then
  git clone https://github.com/landley/toybox.git
  wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-/$PYTHON_VERSION.tar.xz
  tar xvfp Python-3.5.1.tar.xz
fi

mkdir -p $ROOT/bin
mkdir -p $ROOT/usr/bin
MANPREFIX=$ROOT/usr/share/man
DOCPREFIX=$ROOT/usr/share/doc
mkdir -p $MANPREFIX

if [ 0 -ne 0 ] ; then
# ellcc
if [ ! -e ellcc-$TARGET-$ELLCC_VERSION.tgz ] ; then
  wget http://ellcc.org/releases/ellcc-$TARGET-$ELLCC_VERSION.tgz
  cd $ROOT/usr
  if [ -e ellcc ] ; then
    rm -fr ellcc
  fi
  tar xvfp $TOP/ellcc-$TARGET-$ELLCC_VERSION.tgz
  cd $ROOT/bin
  ln -sf ../usr/ellcc/bin/ecc ecc
  ln -sf ../usr/ellcc/bin/ecc++ ecc++
  cd $TOP
fi
fi

# sinit
cd sinit
make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# The mksh shell.
mkdir -p mksh-build
cd mksh-build
HAVE_SYS_SIGNAME=0 sh ../mksh/Build.sh
cp mksh $ROOT/bin
cd ..

# nldev
cd nldev
make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# nlmon
cd nlmon
make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# sbase
cd sbase
make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# sdhcp
cd sdhcp
make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# smdev
cd smdev
make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# svc
cd svc
# make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cp bin/* $ROOT/bin
cp -R svc.d $ROOT/bin
cd ..

# ubase
cd ubase
make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install
cd ..

# ksh
cd loksh
make LDFLAGS=-Wl,-s DESTDIR= PREFIX=$ROOT MAN_DIR=$MANPREFIX DOC_DIR=$DOCPREFIX install
cd ..

# vim
cd vim
make install
cd ..

# toybox
#cd toybox/
#make defconfig toybox
#cd ..

# Python
#cd Python-$PYTHON_VERSION
#LDFLAGS=-Wl,-s ./configure --prefix=$ROOT/usr
#make install
#cd ..
