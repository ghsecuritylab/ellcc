#! /bin/sh
set -e

# The complete package list. See mac_exclude below for Mac exceptions.
packages="kernel sinit sbase ubase smdev nldev nlmon sdhcp loksh hbase
          ntfs3g iproute2 e2fsprogs vim dropbear less6"

# Extra packages, enabled by -extras.
extras="ellcc"

# Packages that don't build currently.
broken="openssh toybox python s6"

# Packages that build, but that are untested/unused or not needed.
unused_packages="uboot"

# Packages to avoid on the Mac (build problems).
mac_exclude="uboot iproute2 e2fsprogs vim"

CLEAN=0
LINUX_VERSION=4.1.15
S6_VERSION=2.2.4.3
UBOOT_VERSION=2015.10
ELLCC_VERSION=0.1.26
VIM_VERSION=7.4
VIM_FEATURES=normal # tiny, small, normal, big or huge (default: normal)
PYTHON_VERSION=3.5.1
E2FSPROGS_VERSION=1.42.13
NTFS3G_VERSION=2015.3.14
IPROUTE2_VERSION=4.3.0
DROPBEAR_VERSION=2015.71
OPENSSH_VERSION=7.1p1
LESS_VERSION=481

exclude=

usage() {
  echo usage: $0 [options] target
  echo "  options:"
  echo "    -packages 'packag1 package2 ...'    Specific packages to build"
  echo "    -exclude  'packag1 package2 ...'    Specific packages to exclude"
  echo "    -extras                             Include additional packages"
  echo "    -clean                              Clean up a previous build"
  echo "  targets:"
  echo "    help                                This message"
  echo "    bcmrpi                              Raspberry Pi    (ARMv6)"
  echo "    bcm2709                             Raspberry Pi 2  (ARMv7)"
  echo "  available packages:"
  echo "    $packages"
  echo "  extra packages:"
  echo "    $extras"
  echo "  packages not buildable on the Mac:"
  echo "    $mac_exclude"
}

if [ $# -lt 1 ] ; then
  usage
  exit 1
fi

while [ $# -gt 1 ] ; do
  case $1 in
    -packages)
      # Packages to include
      shift
      packages=$1
      shift
      ;;
    -exclude)
      # Packages to exclude
      shift
      exclude=$1
      shift
      ;;
    -extras)
      packages="$packages $extras"
      shift
      ;;
    -clean)
      # Clean up a previous build
      CLEAN=1
      shift
      ;;
    *)
      echo "unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

TOP=`pwd`
ELLCC=`realpath $TOP/../..`
UNAME=`uname`

BOARD=$1
if [ "${BOARD}" = "" -o "${BOARD}" = "help" ] ; then
  usage
  exit 0
elif [ "${BOARD}" = "bcmrpi" ] ; then
  ARCH=arm
  UBOOT_BOARD=rpi
  TARGET=armv6-linux-engeabihf  # ARMv6
  NO_VDSO=0
elif [ "${BOARD}" = "bcm2709" ] ; then
  ARCH=arm
  UBOOT_BOARD=rpi_2
  TARGET=arm-linux-engeabihf    # ARMv7
  NO_VDSO=1
else
  echo "unknown target: $1"
  usage
  exit 1
fi

# Enable packages.
for p in `echo $packages` ; do
  eval $p=yes
done

# Disable packages.
for p in `echo $exclude` ; do
  eval $p=no
done

LINUX_CONFIG=${BOARD}_defconfig
if [ "${UBOOT_BOARD}" != "" ] ; then
  UBOOT_CONFIG=${UBOOT_BOARD}_defconfig
else
  uboot=no
fi

# The build directory.
BUILD=$TOP/$TARGET
# The install directories.
ROOT=$TOP/image/$TARGET         # /
BOOT=$TOP/image/$TARGET/$BOARD  # /boot
UBOOT=$TOP/image/$TARGET/u-boot-$UBOOT_BOARD

DOWNLOAD=$TOP/download

if [ $CLEAN -ne 0 ] ; then
  rm -fr $BUILD
  rm -fr $ROOT
  rm -fr $UBOOT
  exit 0
fi

if [ “${UNAME}” = “Darwin” ] ; then
  MAXJOBS=`sysctl hw.ncpu | cut -d: -f2 | tr -d [:space:]`
else
  MAXJOBS=`grep processor /proc/cpuinfo | wc -l`
fi

# Tools.
if [ “${UNAME}” = “Darwin” ] ; then
  export HOSTCC=clang
  # Exclude packages that fail for now.
  for p in `echo $mac_exclude` ; do
    eval $p=no
  done
else
  export HOSTCC=$ELLCC/bin/ecc
fi
export HOST=`echo $TARGET | sed -e "s/\([^-]*\)-\([^-]*\).*/\1-ellcc-\2/"`
export CC="$ELLCC/bin/ecc -target $TARGET"
export CXX="$ELLCC/bin/ecc++ -target $TARGET"
export AR=$ELLCC/bin/ecc-ar
export RANLIB=$ELLCC/bin/ecc-ranlib
export STRIP=$ELLCC/bin/ecc-strip

mkdir -p $BUILD
mkdir -p $DOWNLOAD

if [ "$kernel" = "yes" ] ; then
  if [ ! -e $DOWNLOAD/linux-$LINUX_VERSION.tar.xz ] ; then
    (cd $DOWNLOAD ; wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-$LINUX_VERSION.tar.xz)
  fi
  if [ ! -e linux-$LINUX_VERSION ] ; then
    tar xvfp $DOWNLOAD/linux-$LINUX_VERSION.tar.xz
    cd linux-$LINUX_VERSION/
    for p in `echo ../*-$LINUX_VERSION.patch` ; do
      patch -p1 < $p
    done
    if [ “${UNAME}” = “Darwin” ] ; then
      cp $TOP/makefile GNUmakefile
    else
      cp $TOP/makefile .
    fi
    cd $TOP
  fi
  if [ ! -e $BUILD/$BOARD ] ; then
    cd linux-$LINUX_VERSION/
    # Configure the kernel.
    make ARCH=$ARCH BUILD=$BUILD/$BOARD TARGET=$TARGET MAXJOBS=1 $LINUX_CONFIG
    cd $BUILD/$BOARD
    if [ $NO_VDSO -eq 1 ] ; then
      sed -ie "s/CONFIG_VDSO=y/CONFIG_VDSO=n/" .config
    fi
    cd $TOP
  fi
  # Build the kernel.
  cd $BUILD/$BOARD
  make MAXJOBS=$MAXJOBS
  # Populate /boot
  mkdir -p $BOOT
  make INSTALL_DTBS_PATH=$BOOT/dtbs dtbs_install
  make INSTALL_MOD_PATH=$ROOT modules_install
  rm -f $ROOT/lib/modules/*/build       # Not needed on the target.
  rm -f $ROOT/lib/modules/*/source      # Not needed on the target.
  make INSTALL_PATH=$BOOT zinstall
  cd $TOP
fi

if [ "$uboot" = "yes" ] ; then
  if [ ! -e $DOWNLOAD/u-boot-$UBOOT_VERSION.tar.bz2 ] ; then
    (cd $DOWNLOAD ; wget ftp://ftp.denx.de/pub/u-boot/u-boot-$UBOOT_VERSION.tar.bz2)
  fi
  if [ ! -e u-boot-$UBOOT_VERSION ] ; then
    tar xvfp $DOWNLOAD/u-boot-$UBOOT_VERSION.tar.bz2
    cd u-boot-$UBOOT_VERSION/
    for p in `echo ../*u-boot-$UBOOT_VERSION.patch` ; do
      patch -p1 < $p
    done
    if [ “${UNAME}” = “Darwin” ] ; then
      cp $TOP/makefile.uboot GNUmakefile
    else
      cp $TOP/makefile.uboot makefile
    fi
    cd $TOP
  fi
  if [ ! -e $BUILD/$UBOOT_BOARD ] ; then
    cd u-boot-$UBOOT_VERSION/
    # Configure u-boot
    make ARCH=$ARCH BUILD=$BUILD/u-boot-$UBOOT_BOARD TARGET=$TARGET MAXJOBS=1 $UBOOT_CONFIG
  fi
  # Build u-boot
  cd $BUILD/u-boot-$UBOOT_BOARD
  make MAXJOBS=$MAXJOBS
  mkdir -p $UBOOT
  # RICH
  cd $TOP
fi

mkdir -p $ROOT/bin
mkdir -p $ROOT/sbin
mkdir -p $ROOT/usr
MANPREFIX=$ROOT/usr/share/man
mkdir -p $MANPREFIX
DOCPREFIX=$ROOT/usr/share/doc
mkdir -p $DOCPREFIX

if [ "$ellcc" = "yes" ] ; then
  if [ ! -e $DOWNLOAD/ellcc-$TARGET-$ELLCC_VERSION.tgz ] ; then
    (cd $DOWNLOAD; wget http://ellcc.org/releases/ellcc-$TARGET-$ELLCC_VERSION.tgz)
  fi
  cd $ROOT/usr
  if [ -e ellcc ] ; then
    rm -fr ellcc
  fi
  tar xvfp $DOWNLOAD/ellcc-$TARGET-$ELLCC_VERSION.tgz
  cd $ROOT/bin
  ln -sf ../usr/ellcc/bin/ecc ecc
  ln -sf ../usr/ellcc/bin/ecc++ ecc++
  ln -sf ../usr/ellcc/bin/ecc cc
  ln -sf ../usr/ellcc/bin/ecc++ c++
  ln -sf ../usr/ellcc/bin/ecc gcc
  ln -sf ../usr/ellcc/bin/ecc++ g++
  others="addr2line ar as c++filt elfedit gdb gprof ld nm objcopy objdump \
          ranlib readelf size strings strip"
  for p in $others ; do
    ln -sf ../usr/ellcc/bin/ecc-$p $p
  done
  cd $TOP
fi

# Go into the target directory.
cd $BUILD

getversion () { # $1 = name $2 = URL $3 = archive $4 = command
  eval doit=\$$1
  if [ "$doit" != "yes" ] ; then
    return
  fi
  if [ ! -e $DOWNLOAD/$3 ] ; then
    (cd $DOWNLOAD ; wget $2/$3)
  fi
  if [ ! -e $1 ] ; then
    tar xvfp $DOWNLOAD/$3
    if [ "$4" != "" ] ; then
      eval $4
    fi
  fi
}

if [ “${UNAME}” = “Darwin” ]; then
  UPDATE="rsync -ru"
else
  UPDATE="cp -pfru"
fi

gitsource () { # $1 = name $2 = URL $3 = command
  eval doit=\$$1
  if [ "$doit" != "yes" ] ; then
    return
  fi
  if [ -e ../$1 ] ; then
    # Maintained in the ELLCC tree.
    echo "Copying $1"
    $UPDATE ../$1 .
  else
    # Fetched from a remote tree.
    if [ ! -e $1 ] ; then
      git clone $2
    else
      cd $1
      echo "Updating $1"
      git pull
      cd ..
    fi
  fi
  if [ "$3" != "" ] ; then
    cd $1
    eval $3
    cd ..
  fi
}

fixconfigmk() {
  cat >> config.mk <<EOF
CC=$CC
CXX=$CXX
LD=$CC
AR=$AR
RANLIB=$RANLIB
STRIP=$STRIP
EOF
}

fixranlib () {
  sed -ie 's/@ranlib/@$(RANLIB)/' Makefile
}

fixmacinstall () {
  if [ “${UNAME}” = “Darwin” ] ; then
    sed -ie 's/install -v -D/install -v/' Makefile
  fi
}

gitsource sinit git://git.suckless.org/sinit fixconfigmk
gitsource sbase git://git.suckless.org/sbase fixconfigmk
gitsource ubase git://git.suckless.org/ubase fixconfigmk
gitsource smdev git://git.suckless.org/smdev "fixconfigmk ; fixranlib"
gitsource nldev git://git.r-36.net/nldev fixconfigmk
gitsource nlmon git://git.r-36.net/nlmon fixconfigmk
gitsource hbase git://git.2f30.org/hbase.git fixconfigmk
gitsource sdhcp git://git.2f30.org/sdhcp "fixconfigmk ; fixranlib"
gitsource loksh https://github.com/dimkr/loksh.git fixmacinstall
gitsource toybox https://github.com/landley/toybox.git

getversion e2fsprogs \
  https://www.kernel.org/pub/linux/kernel/people/tytso/e2fsprogs/v$E2FSPROGS_VERSION \
  e2fsprogs-$E2FSPROGS_VERSION.tar.xz \
  "mv e2fsprogs-$E2FSPROGS_VERSION e2fsprogs ; \
  LDFLAGS=-Wl,-s ; \
  (cd e2fsprogs ; ./configure --host=$HOST --prefix=$ROOT/usr --exec-prefix=$ROOT ; make install)"

getversion ntfs3g \
  https://tuxera.com/opensource ntfs-3g_ntfsprogs-$NTFS3G_VERSION.tgz \
  "mv ntfs-3g* ntfs3g ; \
  LDFLAGS=-Wl,-s ; \
  (cd ntfs3g ; \
    patch -p1 < ../../ntfs3g.patch ; \
    ./configure --host=$HOST --prefix=$ROOT/usr --exec-prefix=$ROOT --disable-shared \
      --mandir=$ROOT/usr/share/man \
      --enable-really-static)"

getversion vim \
  ftp://ftp.vim.org/pub/vim/unix vim-$VIM_VERSION.tar.bz2 \
  "mv vim* vim ; \
  LDFLAGS=-Wl,-s ; \
  (cd vim ; export vim_cv_toupper_broken=no ; export vim_cv_terminfo=yes ; \
            export vim_cv_tty_group=world ; export vim_cv_tty_mode=0620 ; \
            export vim_cv_getcwd_broken=no ; \
            export vim_cv_stat_ignores_slash=no ; \
            vim_cv_memmove_handles_overlap=yes \
            ./configure --host=$HOST --prefix=$ROOT/usr --exec-prefix=$ROOT \
              --with-tlib=ncurses --enable-multibyte)"

getversion iproute2 \
  https://www.kernel.org/pub/linux/utils/net/iproute2 \
  iproute2-$IPROUTE2_VERSION.tar.xz \
  "mv iproute2* iproute2 ; \
  LDFLAGS=-Wl,-s ; \
  (cd iproute2 ; \
   patch -p0 < ../../iproute2.patch ; \
   PKG_CONFIG=false ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT)"

getversion dropbear \
  https://matt.ucc.asn.au/dropbear/releases \
  dropbear-$DROPBEAR_VERSION.tar.bz2 \
  "mv dropbear* dropbear ; \
  LDFLAGS=-Wl,-s ; \
  (cd dropbear ; \
   patch -p1 < ../../dropbear.patch ; \
   ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT \
      --mandir=$ROOT/usr/share/man)"

getversion openssh \
  http://mirror.team-cymru.org/pub/OpenBSD/OpenSSH/portable \
  openssh-$OPENSSH_VERSION.tar.gz \
  "mv openssh* openssh ; \
  LDFLAGS=-Wl,-s ; \
  (cd openssh ; \
   ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT --without-openssl)"

getversion python \
  https://www.python.org/ftp/python/$PYTHON_VERSION \
  Python-$PYTHON_VERSION.tar.xz \
  "mv Python* python ; \
  (cd python ; \
   ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT)"

getversion less \
  http://www.greenwoodsoftware.com/less \
  less-$LESS_VERSION.tar.gz \
  "mv less* less ; \
  (cd less ; \
   ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT \
     --mandir=$ROOT/usr/share/man)"

getversion s6 \
  http://skarnet.org/software/s6 \
  s6-$S6_VERSION.tar.gz \
  "mv s6* s6 ; \
  (cd s6 ; \
   ./configure --host=$HOST --prefix=$ROOT --exec-prefix=$ROOT \
     --mandir=$ROOT/usr/share/man)"

makeit () { # $1 = name, $2 = command
  eval doit=\$$1
  if [ "$doit" = "yes" ] ; then
    cd $1
    eval $2
    cd ..
  fi

}

makeit sinit "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit nldev "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit nlmon "make LDFLAGS=-Wl,-s INCS=-I. PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit sbase "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit hbase "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit sdhcp "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit smdev "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
makeit ubase "make LDFLAGS=-Wl,-s PREFIX=$ROOT MANPREFIX=$MANPREFIX LIBS= install"
# ksh
makeit loksh "make LDFLAGS=-Wl,-s DESTDIR= PREFIX=$ROOT MAN_DIR=$MANPREFIX DOC_DIR=$DOCPREFIX install"
makeit vim "make install"
makeit e2fsprogs  "make install ; \
                  (cd $ROOT/sbin ; \
                   rm -f mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.ext4dev ; \
                   rm -f fsck.ext2 fsck.ext3 fsck.ext4 fsck.ext4dev ; \
                   ln -s mke2fs mkfs.ext2 ; \
                   ln -s mke2fs mkfs.ext3 ; \
                   ln -s mke2fs mkfs.ext4 ; \
                   ln -s mke2fs mkfs.ext4dev ; \
                   ln -s e2fsck fsck.ext2 ; \
                   ln -s e2fsck fsck.ext3  ; \
                   ln -s e2fsck fsck.ext4 ; \
                   ln -s e2fsck fsck.ext4dev ; 
                   rm -f e2label findfs ; \
                   ln -s tune2fs e2label ; \
                   ln -s tune2fs findfs)"

NTFS3G_PROGS="src/lowntfs-3g \
  src/ntfs-3g \
  src/ntfs-3g.probe \
  src/ntfs-3g.secaudit \
  src/ntfs-3g.usermap \
  ntfsprogs/mkntfs \
  ntfsprogs/ntfscat \
  ntfsprogs/ntfsclone \
  ntfsprogs/ntfscluster \
  ntfsprogs/ntfscmp \
  ntfsprogs/ntfscp \
  ntfsprogs/ntfsfix \
  ntfsprogs/ntfsinfo \
  ntfsprogs/ntfslabel \
  ntfsprogs/ntfsls \
  ntfsprogs/ntfsresize \
  ntfsprogs/ntfsundelete"
makeit ntfs3g   "make; cp $NTFS3G_PROGS $ROOT/sbin ; \
                for p in \`find . -name "*.8.in"| grep -v e2fsprogs\` ; do \
                  n=\`basename \$p | sed 's:.in::g'\` ; \
                  cp \$p $ROOT/usr/share/man/man8/\$n ; \
                done ; \
                (cd $ROOT/sbin ; \
                 ln -sf mkntfs mkfs.ntfs ; \
                 ln -sf lowntfs-3g mount.lowntfs-3g ; \
                 ln -sf ntfs-3g mount.ntfs-3g)"

makeit iproute2 "make SBINDIR=$ROOT/sbin \
                  CONFDIR=$ROOT/etc/iproute2 \
                  DATADIR=$ROOT/usr/share \
                  DOCDIR=$ROOT/usr/doc \
                  MANDIR=$ROOT/usr/man \
                  ARPDDIR=$ROOT/var/lib/arpd \
                  KERNEL_INCLUDE=$ROOT/usr/include \
                  install"
makeit openssh "make install"
makeit dropbear "make PROGRAMS='dropbear dbclient dropbearkey dropbearconvert scp' \
                     MULTI=1 STATIC=1 SCPPROGRESS=1 install ; \
                 (cd $ROOT/bin ; \
                    ln -sf dropbearmulti ssh ; \
                    ln -sf dropbearmulti scp ; \
                    ln -sf dropbearmulti dbclient ; \
                    ln -sf dropbearmulti dropbearkey ; \
                    ln -sf dropbearmulti dropbearconvert); \
                 (cd $ROOT/sbin ; \
                    ln -sf /bin/dropbearmulti dropbear)"

makeit toybox "make defconfig toybox"
makeit python "make install"
makeit less "make install"
makeit less "make"
