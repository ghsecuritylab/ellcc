diff -Nur u-boot-2015.10.orig/arch/arm/include/asm/global_data.h u-boot-2015.10/arch/arm/include/asm/global_data.h
--- u-boot-2015.10.orig/arch/arm/include/asm/global_data.h	2015-10-19 18:59:38.000000000 -0500
+++ u-boot-2015.10/arch/arm/include/asm/global_data.h	2016-01-09 17:57:09.945294510 -0600
@@ -75,6 +75,19 @@
 	return gd_ptr;
 }
 
+static inline void arch_setup_gd(struct global_data *gd_ptr)
+{
+#ifdef CONFIG_ARM64
+	/*
+	 * Make will already error that reserving x18 is not supported at the
+	 * time of writing, clang: error: unknown argument: '-ffixed-x18'
+	 */
+	__asm__ volatile("mov x18, %0\n" : "=r" (gd_ptr));
+#else
+	__asm__ volatile("mov r9, %0\n" : "=r" (gd_ptr));
+#endif
+}
+
 #else
 
 #ifdef CONFIG_ARM64
Binary files u-boot-2015.10.orig/arch/arm/include/asm/.global_data.h.swp and u-boot-2015.10/arch/arm/include/asm/.global_data.h.swp differ
diff -Nur u-boot-2015.10.orig/common/board_f.c u-boot-2015.10/common/board_f.c
--- u-boot-2015.10.orig/common/board_f.c	2015-10-19 18:59:38.000000000 -0500
+++ u-boot-2015.10/common/board_f.c	2016-01-09 17:55:40.364182539 -0600
@@ -1032,7 +1032,7 @@
 #endif /* CONFIG_X86 */
 
 /* Unfortunately x86 can't compile this code as gd cannot be assigned */
-#ifndef CONFIG_X86
+#if !defined(CONFIG_X86) && !defined(__clang__)
 __weak void arch_setup_gd(struct global_data *gd_ptr)
 {
 	gd = gd_ptr;
diff -Nur u-boot-2015.10.orig/makefile u-boot-2015.10/makefile
--- u-boot-2015.10.orig/makefile	1969-12-31 18:00:00.000000000 -0600
+++ u-boot-2015.10/makefile	2016-01-09 15:11:25.463018939 -0600
@@ -0,0 +1,115 @@
+# Cross compiling variables
+ARCH		?= arm
+TARGET		?= arm-linux-engeabihf
+
+ELLCC		:= $(shell realpath $(shell pwd)/../../..)
+UNAME           := $(shell uname)
+ifeq ($(UNAME),Darwin)
+  HOSTCC		:= clang
+  HOSTCFLAGS            := -I../osx_include
+else
+  HOSTCC		:= $(ELLCC)/bin/ecc
+endif
+
+EXTRACFLAGS	:= -mno-movt -ffixed-r9
+CC		:= $(ELLCC)/bin/ecc -target $(TARGET) \
+		   -I$(ELLCC)/libecc/include/$(ARCH) $(EXTRACFLAGS)
+
+CPP		:= $(CC) -E
+LD		:= $(ELLCC)/bin/ecc-ld -m armelf_linux_eabi \
+                     -L$(ELLCC)/libecc/lib/$(TARGET)
+OBJCOPY		:= $(ELLCC)/bin/ecc-objcopy
+OBJDUMP		:= $(ELLCC)/bin/ecc-objdump
+AR		:= $(ELLCC)/bin/ecc-ar
+NM		:= $(ELLCC)/bin/ecc-nm
+STRIP		:= $(ELLCC)/bin/ecc-strip
+SIZE		:= $(ELLCC)/bin/ecc-size
+
+MAXJOBS		?= 1
+
+ifdef ARCH
+export ARCH
+endif
+ifdef CROSS_COMPILE
+export CROSS_COMPILE
+endif
+ifdef CC
+export CC
+endif
+ifdef CPP
+export CPP
+endif
+ifdef LD
+export LD
+endif
+ifdef HOSTCC
+export HOSTCC
+endif
+ifdef HOSTCFLAGS
+export HOSTCFLAGS
+endif
+ifdef OBJCOPY
+export OBJCOPY
+endif
+ifdef OBJDUMP
+export OBJDUMP
+endif
+ifdef AR
+export AR
+endif
+ifdef NM
+export NM
+endif
+ifdef STRIP
+export STRIP
+endif
+ifdef SIZE
+export SIZE
+endif
+
+ifdef O
+export O
+endif
+
+# This allows you to compile out of tree depending on ARCH and CC
+
+# Remove spaces from CC
+#empty		:=
+#space		:= $(empty) $(empty)
+#CC_NOSPACES	:= $(subst $(space),_,$(CC))
+
+# Where to put build output
+#ARCH		?= x86
+#O		:= build/$(ARCH)-$(CC_NOSPACES)
+O		:= $(BUILD)
+
+LINUXFLAGS	= CPP="$(CPP)" CC="$(CC)" HOSTCC="$(HOSTCC)" HOSTCFLAGS="$(HOSTCFLAGS)" \
+                  LD="$(LD)" OBJCOPY="$(OBJCOPY)" OBJDUMP="$(OBJDUMP)" \
+                  AR="$(AR)" NM="$(NM)" STRIP="$(STRIP)" SIZE="$(SIZE)"
+
+linuxmake	= $(MAKE) -j $(MAXJOBS) -f Makefile $(LINUXFLAGS) O=$(1) $(2)
+
+%:
+	@$(call linuxmake,$(O),$@)
+
+%/: force
+	@$(call linuxmake,$(O),$@)
+
+%.o: %.c
+	@$(call linuxmake,$(O),$@)
+
+%.i: %.c
+	@$(call linuxmake,$(O),$@)
+
+%.s: %.c
+	@$(call linuxmake,$(O),$@)
+
+%.s: %.S
+	@$(call linuxmake,$(O),$@)
+
+all:
+	@$(call linuxmake,$(O),$@)
+
+.PHONY: force
+force: ;
+	:
