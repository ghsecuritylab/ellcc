/** @file
 * This header defines types used in conjunction with the operators typeid
 * and dynamic_cast.
 */
#ifndef _TYPEINFO_
#define _TYPEINFO_

#include <exception>

namespace std {

/** Stores information about a type.
 * This is the type returned by the typeid operator. It can be used to compare
 * the type of objects or to retrieve the name of a type.
 * typeid can be applied directly to types, in which case it returns its information;
 * Or to objects, in which case it returns information on the type of the object.
 *
 * When typeid is applied to a dereferenced pointer to an object of a polymorphic
 * class type (a class declaring or inheriting a virtual function), it considers its
 * dynamic type (i.e., the type of the most derived object). This requires the RTTI
 * (Run-time type information) to be available.
 *
 * When typeid is applied to a dereferenced null pointer a bad_typeid exception is
 * thrown.
 */
class type_info {
public:
  virtual ~type_info();

  /** Compare for equality.
   * Return whether the two types describe the same type.
   * A derived type is not considered the same type as any of its base classes.
   */
  bool operator== (const type_info& rhs) const;

  /** Compare for inequality.
   * Return whether the two types do not describe the same type.
   * A derived type is not considered the same type as any of its base classes.
   */
  bool operator!= (const type_info& rhs) const;

  /** Returns true if the type precedes the type of rhs in the collation order.
   * The collation order is just an internal order kept by a particular
   * implementation and is not necessarily related to inheritance relations or
   * declaring order.
   */
  bool before (const type_info& rhs) const;

  /** Returns a null-terminated character sequence with a human-readable name
   * for the type.
   */
  const char* name() const;
private:
  type_info (const type_info& rhs);
  type_info& operator= (const type_info& rhs);
};

/** Type of the exceptions thrown by dynamic_cast when they fail the run-time
 * check performed on references to polymorphic class types.
 *
 * The run-time check fails if the object would be an incomplete object of the
 * destination type.
 *
 * Its member what returns a null-terminated character sequence identifying the
 * exception.
 *
 * Some functions in the standard library may also throw this exception to
 * signal a type-casting error.
 */
class bad_cast : exception {
public:
    const char* what() { return "bad cast"; }
};

/** Type of the exceptions thrown by typeid when applied on a pointer to a
 * polymorphic type which has a null pointer value.
 *
 * Its member what returns a null-terminated character sequence identifying
 * the exception.
 */
class bad_typeid : exception {
public:
    const char* what() { return "bad typeid"; }
};

} // namespace std

#endif
